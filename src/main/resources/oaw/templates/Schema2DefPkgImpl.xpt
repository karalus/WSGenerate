«IMPORT com::artofarc::wsimport»

«IMPORT org::w3::_2001::xmlschema»
«IMPORT javax::xml::bind»
«IMPORT javax::xml::namespace»


«EXTENSION oaw::extensions::db»


«DEFINE Root FOR ServiceNamespace»
«IF XSD2PackageName() != null»
«FILE "plsql/" + getDBSchema("/") + XSD2PackageName() + ".PKB"-»
CREATE OR REPLACE PACKAGE BODY «getDBSchema(".")»«XSD2PackageName()» IS
  /**
  * <pre>
«IF model.bindingDefinition.getGlobalProperty("vcsHeader", null) != null-»
«model.bindingDefinition.getGlobalProperty("vcsHeader", null)»
«ENDIF-»
  *
  *  <br/>
  *  XSD-Referenz:        «URI»
  *  <br/>
  *
  *  <b>Beschreibung:</b>
  * «URI» consists of «schemas.size» file(s):
«FOREACH documentBaseURIs AS documentBaseURI-»
  * documentBaseURI: «documentBaseURI»
«ENDFOREACH-»
  *
  * Dokumentation aus den XSDs:
«FOREACH distinct(schemas.collect(s|concat(s.getDocumentationContent().collect(c|c.toString().formatDocumentation("  * ")))), {}) AS doc»«doc»«ENDFOREACH-»
  *
  *  </pre>
  *  @headcom
  *  <pre>
  *  !!! A C H T U N G  -- Modul ist generiert -- bitte nicht ändern !!!!
  *  WSGenerate Version «getGeneratorVersion()» Build Time «getGeneratorBuildTime()»
  *
  */

  FUNCTION c_URI 
    RETURN VARCHAR2 
  DETERMINISTIC 
  IS 
  BEGIN 
    RETURN '«URI»'; 
  END c_URI;

  /*
  * xml_to_record(4x) und record_to_xml(2x) Routinen für die einzelnen Typen
  */
«FOREACH simpleTypes().select(e|isSimpleTypeList(e)) AS listType-»
«LET getBaseTypeForListType(listType) AS baseType-»
«LET baseType != null && !isSimpleTypeList(baseType) ? getFacets(baseType) : null AS facets-»
  FUNCTION «XSDType2Oracle(listType, "4l")»(p_str IN VARCHAR2) RETURN «XSDType2Oracle(listType)» AS
    v_result «XSDType2Oracle(listType)» := «XSDType2Oracle(listType)»();
«LET listType.getBaseType() AS baseTypeList-»
«IF isBuiltInType(baseTypeList)-»
    v_part   «convertXSDBasicTypeOracle(baseTypeList)»;
«ELSE-»
    v_part   «getPackagePrefix(baseTypeList)»«XSDType2Oracle(baseTypeList)»;
«ENDIF-»
«ENDLET-»
    i        BINARY_INTEGER := 1;
  BEGIN
    LOOP
      v_part := «convertXSDBasicType2Oracle(getBuiltInType(listType), facets, "REGEXP_SUBSTR(p_str, '\\S+', 1, i)", null)»;
      EXIT WHEN v_part IS NULL;
      v_result.extend();
      v_result(i) := v_part;
      i := i + 1;
    END LOOP;
    return v_result;
  END;

  FUNCTION «XSDType2Oracle(listType, "2l")»(p_list IN «XSDType2Oracle(listType)») RETURN VARCHAR2 AS
    v_result VARCHAR2(32767);
  BEGIN
    IF p_list.count > 0 THEN
      v_result := «convertOracle2XSDBasicType(getBuiltInType(listType), facets, "p_list(1)")»;
      FOR i IN 2..p_list.count LOOP
        v_result := v_result || ' ' || «convertOracle2XSDBasicType(getBuiltInType(listType), facets, "p_list(i)")»;
      END LOOP;
    ELSE
      v_result := '';
    END IF;
    return v_result;
  END;

«ENDLET-»
«ENDLET-»
«ENDFOREACH-»
«FOREACH namedGroupsWithAnonymousComplexType() AS namedGroupWithAnonymousComplexType-»
«FOREACH namedGroupWithAnonymousComplexType.elements().select(e|e.complexType != null) AS element-»
«EXPAND XSDSchema(element.complexType, anonymousTypeName(element, namedGroupWithAnonymousComplexType.name))-»
«ENDFOREACH-»
«ENDFOREACH-»
«FOREACH complexTypesNotAbstract() AS ct-»
«EXPAND XSDSchemaComplexTypes(ct, ct.name)-»
«ENDFOREACH-»
«FOREACH topLevelElementsWithAnonymousComplexType() AS topLevelElementWithAnonymousComplexType-»
«EXPAND XSDSchemaComplexTypes(topLevelElementWithAnonymousComplexType.complexType, anonymousTypeName(topLevelElementWithAnonymousComplexType, ""))-»
«ENDFOREACH-»
«FOREACH topLevelElements() AS tle-»
«EXPAND XMLStringConversion(tle)-»
«ENDFOREACH-»
END «XSD2PackageName()»;
/
«IF model.bindingDefinition.getGlobalProperty("footer", null) != null-»
«model.bindingDefinition.getGlobalProperty("footer", null)»
«ENDIF-»
«ENDFILE»
«ENDIF»
«ENDDEFINE»

«REM»Navigate in ComplexType«ENDREM»
«DEFINE XSDSchemaComplexTypes(ComplexType ct, String typeName) FOR ServiceNamespace -»
«IF ct.complexContent != null-»
«IF ct.complexContent.extension != null-»
«EXPAND XSDSchemaComplexTypes(ct.complexContent.extension, typeName)-»
«ELSEIF ct.complexContent.restriction != null-»
«EXPAND XSDSchemaComplexTypes(ct.complexContent.restriction, typeName)-»
«ENDIF-»
«ELSE-»
«IF ct.group != null-»
«EXPAND XSDSchemaComplexTypes(ct.group, typeName)-»
«ELSEIF ct.all != null-»
«EXPAND XSDSchemaComplexTypes(ct.all, typeName)-»
«ELSEIF ct.choice != null-»
«EXPAND XSDSchemaComplexTypes(ct.choice, typeName)-»
«ELSEIF ct.sequence != null-»
«EXPAND XSDSchemaComplexTypes(ct.sequence, typeName)-»
«ENDIF-»
«ENDIF-»
«EXPAND XSDSchema(ct, typeName)-»
«ENDDEFINE»

«DEFINE XSDSchemaComplexTypes(ExtensionType et, String typeName) FOR ServiceNamespace-»
«IF et.group != null-»
«EXPAND XSDSchemaComplexTypes(et.group, typeName)-»
«ELSEIF et.all != null-»
«EXPAND XSDSchemaComplexTypes(et.all, typeName)-»
«ELSEIF et.choice != null-»
«EXPAND XSDSchemaComplexTypes(et.choice, typeName)-»
«ELSEIF et.sequence != null-»
«EXPAND XSDSchemaComplexTypes(et.sequence, typeName)-»
«ENDIF-»
«ENDDEFINE»

«DEFINE XSDSchemaComplexTypes(ComplexRestrictionType crt, String typeName) FOR ServiceNamespace-»
«IF crt.group != null-»
«EXPAND XSDSchemaComplexTypes(crt.group, typeName)-»
«ELSEIF crt.all != null-»
«EXPAND XSDSchemaComplexTypes(crt.all, typeName)-»
«ELSEIF crt.choice != null-»
«EXPAND XSDSchemaComplexTypes(crt.choice, typeName)-»
«ELSEIF crt.sequence != null-»
«EXPAND XSDSchemaComplexTypes(crt.sequence, typeName)-»
«ENDIF-»
«ENDDEFINE»

«DEFINE XSDSchemaComplexTypes(GroupRef gr, String typeName) FOR ServiceNamespace-»
«EXPAND XSDSchemaComplexTypes(findReferencedGroup(gr.ref), typeName)-»
«ENDDEFINE»

«DEFINE XSDSchemaComplexTypes(Group g, String typeName) FOR ServiceNamespace-»
«FOREACH g.particle.typeSelect(JAXBElement).getValue() AS obj-»
«EXPAND XSDSchemaComplexTypes(obj, typeName)-»
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE XSDSchemaComplexTypes(Element e, String typeName) FOR ServiceNamespace-»
«IF e.complexType != null-»
«EXPAND XSDSchemaComplexTypes(e.complexType, anonymousTypeName(e, typeName))-»
«ENDIF-»
«ENDDEFINE»

«DEFINE XSDSchemaComplexTypes(Object obj, String typeName) FOR ServiceNamespace-»
«ERROR "Particle type not supported: " + this»
«ENDDEFINE»

«REM»«ENDREM»

«DEFINE XSDSchema(ComplexType ct, String name) FOR ServiceNamespace-»
  FUNCTION «XSDType2Oracle(name, ct, "4x")» (
      p_node                  IN DBMS_XMLDOM.DOMNode
  ) RETURN «XSDType2Oracle(name, ct)»
  IS
    v_return                     «XSDType2Oracle(name, ct)»;
    children                     DBMS_XMLDOM.DOMNodeList;
    len                          NUMBER;
    node                         DBMS_XMLDOM.DOMNode;
    elmt                         DBMS_XMLDOM.DOMElement;
    text                         DBMS_XMLDOM.DOMNode;
«IF ct.hasAttributes()-»
    attr                         DBMS_XMLDOM.DOMAttr;
«ENDIF-»
    localName                    VARCHAR2(255);
    namespace                    VARCHAR2(999);
  BEGIN

«EXPAND XML2Oracle_Init(ct, "v_return", name)-»
«IF ct.simpleContent == null-»
    children := DBMS_XMLDOM.getChildNodes(p_node);
    len := DBMS_XMLDOM.getLength(children);
    FOR i IN 0..len-1 LOOP
      node := DBMS_XMLDOM.item(children, i);

      IF DBMS_XMLDOM.getNodeType(node) = DBMS_XMLDOM.ELEMENT_NODE THEN
        elmt := DBMS_XMLDOM.makeElement(node);
        localName := DBMS_XMLDOM.getLocalName(elmt);
        namespace := DBMS_XMLDOM.getNamespace(elmt);
        CASE
«EXPAND XML2Oracle(ct, "v_return", name)-»
         WHEN FALSE THEN NULL;
         ELSE
          «BasePackageName(model)».fehler_unerwartetes_element('{' || namespace || '}' || localName);
        END CASE;
      END IF;
    END LOOP;

«ENDIF-»
    v_return.INTERN_isPresent := TRUE;

    RETURN v_return;

  END «XSDType2Oracle(name, ct, "4x")»;

  PROCEDURE «XSDType2Oracle(name, ct, "2x")» (
    p_rec                     IN «XSDType2Oracle(name, ct)»
  , p_domdoc                  IN DBMS_XMLDOM.DOMDocument
  , p_parent_node             IN DBMS_XMLDOM.DOMNode
  , p_default_ns              IN VARCHAR2
  ) IS

    elmt                         DBMS_XMLDOM.DOMElement;
    node                         DBMS_XMLDOM.DOMNode;
    text                         DBMS_XMLDOM.DOMText;

  BEGIN

«EXPAND Oracle2XML(ct, "p_rec", name)»
    RETURN;
  END «XSDType2Oracle(name, ct, "2x")»;

  FUNCTION isNotNull(
    p_rec IN «XSDType2Oracle(name, ct)»
  ) RETURN BOOLEAN
  IS
  BEGIN
«LET getIsNotNullExpression(ct, "p_rec") AS exp-»
«IF exp != null-»
    RETURN CASE p_rec.INTERN_isPresent WHEN FALSE THEN FALSE WHEN TRUE THEN TRUE ELSE «exp» END;
«ELSE-»
    -- unentscheidbar, da leer
    RETURN CASE p_rec.INTERN_isPresent WHEN TRUE THEN TRUE ELSE FALSE END;
«ENDIF-»
«ENDLET-»
  END isNotNull;

  PROCEDURE setNotNull(
    p_rec IN OUT NOCOPY «XSDType2Oracle(name, ct)»
  , p_NotNull IN BOOLEAN
  )
  IS
  BEGIN
    p_rec.INTERN_isPresent := p_NotNull;
  END setNotNull;

  FUNCTION isNotEmpty(
    p_table IN «XSDType2Oracle(name, ct, true)»
  ) RETURN BOOLEAN
  IS
  BEGIN
    RETURN p_table IS NOT NULL AND p_table.count > 0;
  END isNotEmpty;

«ENDDEFINE»

«REM»«ENDREM»
«DEFINE XML2Oracle_Init(ComplexType ct, String parentParam, String name) FOR ServiceNamespace -»
«IF ct.attributeOrAttributeGroup.size > 0-»
	elmt := DBMS_XMLDOM.makeElement(p_node);
«FOREACH ct.attributeOrAttributeGroup AS a-»
«EXPAND XML2Oracle(a)-»
«ENDFOREACH-»

«ENDIF-»
«IF ct.complexContent != null-»
«IF ct.complexContent.extension != null-»
«LET findUsedServiceNamespace(ct.complexContent.extension.base.namespaceURI) AS ns-»
«LET findComplexType(ns, ct.complexContent.extension.base) AS tlct-»
«EXPAND XML2Oracle_Init(tlct, parentParam, tlct.name) FOR ns-»
«ENDLET-»
«ENDLET-»
«EXPAND XML2Oracle_Init(ct.complexContent.extension, parentParam, name)-»
«ELSEIF ct.complexContent.restriction != null-»
«EXPAND XML2Oracle_Init(ct.complexContent.restriction, parentParam, name)-»
«ENDIF-»
«ELSEIF ct.simpleContent != null-»
	text := DBMS_XMLDOM.getFirstChild(p_node);
	v_return.value := «convertXSDBasicType2Oracle(getBuiltInType(ct.simpleContent.extension.base), null, "DBMS_XMLDOM.getNodeValue(text)", "text")»;
«IF ct.simpleContent.extension.attributeOrAttributeGroup.size > 0-»
	elmt := DBMS_XMLDOM.makeElement(p_node);
«FOREACH ct.simpleContent.extension.attributeOrAttributeGroup AS a-»
«EXPAND XML2Oracle(a)-»
«ENDFOREACH-»

«ENDIF-»
«ELSE-»
«IF ct.group != null-»
«EXPAND XML2Oracle_Init(ct.group, parentParam, name, null, null, "group")-»
«ELSEIF ct.all != null-»
«EXPAND XML2Oracle_Init(ct.all, parentParam, name, null, null, "all")-»
«ELSEIF ct.choice != null-»
«EXPAND XML2Oracle_Init(ct.choice, parentParam, name, null, null, "choice")-»
«ELSEIF ct.sequence != null-»
«EXPAND XML2Oracle_Init(ct.sequence, parentParam, name, null, null, "sequence")-»
«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«DEFINE XML2Oracle_Init(ExtensionType et, String parentParam, String name) FOR ServiceNamespace-»
«IF et.attributeOrAttributeGroup.size > 0-»
	elmt := DBMS_XMLDOM.makeElement(p_node);
«FOREACH et.attributeOrAttributeGroup AS a-»
«EXPAND XML2Oracle(a)-»
«ENDFOREACH-»

«ENDIF-»
«IF et.group != null-»
«EXPAND XML2Oracle_Init(et.group, parentParam, name, null, null, "group")-»
«ELSEIF et.all != null-»
«EXPAND XML2Oracle_Init(et.all, parentParam, name, null, null, "all")-»
«ELSEIF et.choice != null-»
«EXPAND XML2Oracle_Init(et.choice, parentParam, name, null, null, "choice")-»
«ELSEIF et.sequence != null-»
«EXPAND XML2Oracle_Init(et.sequence, parentParam, name, null, null, "sequence")-»
«ENDIF-»
«ENDDEFINE»

«DEFINE XML2Oracle_Init(ComplexRestrictionType crt, String parentParam, String name) FOR ServiceNamespace-»
«IF crt.group != null-»
«EXPAND XML2Oracle_Init(crt.group, parentParam, name, null, null, "group")-»
«ELSEIF crt.all != null-»
«EXPAND XML2Oracle_Init(crt.all, parentParam, name, null, null, "all")-»
«ELSEIF crt.choice != null-»
«EXPAND XML2Oracle_Init(crt.choice, parentParam, name, null, null, "choice")-»
«ELSEIF crt.sequence != null-»
«EXPAND XML2Oracle_Init(crt.sequence, parentParam, name, null, null, "sequence")-»
«ENDIF-»
«ENDDEFINE»

«DEFINE XML2Oracle_Init(GroupRef gr, String parentParam, String typeName, String parentGroupType, Group parentGroup, String particleType) FOR ServiceNamespace-»
«EXPAND XML2Oracle_Init(findReferencedGroup(gr.ref), parentParam, typeName, parentGroupType, parentGroup, particleType)-»
«ENDDEFINE»

«DEFINE XML2Oracle_Init(Group g, String parentParam, String typeName, String parentGroupType, Group parentGroup, String particleType) FOR ServiceNamespace-»
«FOREACH g.particle.typeSelect(JAXBElement) AS p-»
«EXPAND XML2Oracle_Init(p.getValue(), parentParam, typeName, particleType, g, p.name.localPart)-»
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE XML2Oracle_Init(Object obj, String parentParam, String typeName, String parentGroupType, Group parentGroup, String particleType) FOR ServiceNamespace-»
«ERROR "Particle type not supported: " + particleType»
«ENDDEFINE»

«DEFINE XML2Oracle_Init(Element e, String parentParam, String typeName, String parentGroupType, Group parentGroup, String particleType) FOR ServiceNamespace-»
«IF isArray(e, parentGroup)-»
«LET getTypeNamespace(e) AS ns-»
«LET parentParam + '.' + getOracleName(e) AS elementAccess-»
	-- Init Array Element
«IF e.type != null-»
«IF findSimpleType(ns, e.type) != null-»
    «elementAccess» := «getPackagePrefix(ns)»«XSDType2Oracle(ns, e.type, true)»();
«ELSE-»
    «elementAccess» := «getPackagePrefix(ns)»«XSDType2Oracle(ns, findComplexType(ns, e.type), true)»();
«ENDIF-»
«ELSEIF e.ref != null-»
«LET findReferencedElement(e.ref) AS refElement-»
    «elementAccess» := «getOracleTypeForRefElement(ns, refElement, true, parentGroup)»();
«ENDLET-»
«ELSEIF e.complexType != null-»
    «elementAccess» := «getPackagePrefix(ns)»«anonymousTypeName2Oracle(e, typeName, true)»();
«ELSEIF e.simpleType != null-»
«IF isBuiltInType(e.simpleType.restriction.base)-»
	«elementAccess» := «XSDType2Oracle(anonymousTypeName(e, typeName), e.simpleType, true)»();
«ELSE-»
  	«elementAccess» := «getPackagePrefix(e.simpleType.restriction.base)»«XSDType2Oracle(e.simpleType.restriction.base, true)»();
«ENDIF»
«ELSE-»
-- No Type found for «e.name»
«ENDIF-»
«ENDLET-»
«ENDLET-»
«ENDIF-»
«ENDDEFINE»

«REM»Logik um aus der XML Struktur die PL/SQL RECORD TYPEs zu befüllen«ENDREM»
«DEFINE XML2Oracle(ComplexType ct, String parentParam, String name) FOR ServiceNamespace -»
«IF ct.complexContent != null-»
«IF ct.complexContent.extension != null-»
«LET findUsedServiceNamespace(ct.complexContent.extension.base.namespaceURI) AS ns-»
«LET findComplexType(ns, ct.complexContent.extension.base) AS tlct-»
«EXPAND XML2Oracle(tlct, parentParam, tlct.name)-»
«ENDLET-»
«ENDLET-»
«EXPAND XML2Oracle(ct.complexContent.extension, parentParam, name)-»
«ELSEIF ct.complexContent.restriction != null-»
«EXPAND XML2Oracle(ct.complexContent.restriction, parentParam, name)-»
«ENDIF-»
«ELSE-»
«IF ct.group != null-»
«EXPAND XML2Oracle(ct.group, parentParam, name, null, null, "group")-»
«ELSEIF ct.all != null-»
«EXPAND XML2Oracle(ct.all, parentParam, name, null, null, "all")-»
«ELSEIF ct.choice != null-»
«EXPAND XML2Oracle(ct.choice, parentParam, name, null, null, "choice")-»
«ELSEIF ct.sequence != null-»
«EXPAND XML2Oracle(ct.sequence, parentParam, name, null, null, "sequence")-»
«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«DEFINE XML2Oracle(ExtensionType et, String parentParam, String name) FOR ServiceNamespace-»
«IF et.group != null-»
«EXPAND XML2Oracle(et.group, parentParam, name, null, null, "group")-»
«ELSEIF et.all != null-»
«EXPAND XML2Oracle(et.all, parentParam, name, null, null, "all")-»
«ELSEIF et.choice != null-»
«EXPAND XML2Oracle(et.choice, parentParam, name, null, null, "choice")-»
«ELSEIF et.sequence != null-»
«EXPAND XML2Oracle(et.sequence, parentParam, name, null, null, "sequence")-»
«ENDIF-»
«ENDDEFINE»

«DEFINE XML2Oracle(ComplexRestrictionType crt, String parentParam, String name) FOR ServiceNamespace-»
«IF crt.group != null-»
«EXPAND XML2Oracle(crt.group, parentParam, name, null, null, "group")-»
«ELSEIF crt.all != null-»
«EXPAND XML2Oracle(crt.all, parentParam, name, null, null, "all")-»
«ELSEIF crt.choice != null-»
«EXPAND XML2Oracle(crt.choice, parentParam, name, null, null, "choice")-»
«ELSEIF crt.sequence != null-»
«EXPAND XML2Oracle(crt.sequence, parentParam, name, null, null, "sequence")-»
«ENDIF-»
«ENDDEFINE»

«DEFINE XML2Oracle(GroupRef gr, String parentParam, String typeName, String parentGroupType, Group parentGroup, String particleType) FOR ServiceNamespace-»
«EXPAND XML2Oracle(findReferencedGroup(gr.ref), parentParam, typeName, parentGroupType, parentGroup, particleType)-»
«ENDDEFINE»

«DEFINE XML2Oracle(Group g, String parentParam, String typeName, String parentGroupType, Group parentGroup, String particleType) FOR ServiceNamespace-»
«FOREACH g.particle.typeSelect(JAXBElement) AS p-»
«EXPAND XML2Oracle(p.getValue(), parentParam, typeName, particleType, g, p.name.localPart)-»
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE XML2Oracle(Object obj, String parentParam, String typeName, String parentGroupType, Group parentGroup, String particleType) FOR ServiceNamespace-»
«ERROR "Particle type not supported: " + particleType»
«ENDDEFINE»

«DEFINE XML2Oracle(LocalElement e, String parentParam, String typeName, String parentGroupType, Group parentGroup, String particleType) FOR ServiceNamespace-»
«LET getTypeNamespace(e) AS ns-»
«LET getElementNamespace(e) AS elemNs-»
«LET parentParam + '.' + getOracleName(e) AS elementAccess-»
         WHEN localName = '«e.ref != null ? e.ref.localPart : e.name»' AND namespace «IF elemNs != null»= '«elemNs.URI»'«ELSE»IS NULL«ENDIF» THEN
«IF isArray(e, parentGroup)-»
          «elementAccess».extend;
«ENDIF-»
«IF e.nillable-»
          IF NVL(DBMS_XMLDOM.getAttribute(elmt, 'nil', 'http://www.w3.org/2001/XMLSchema-instance'), 'false') NOT IN ('true', '1') THEN
«ENDIF-»
«IF hasSimpleType(e)-»
          text := DBMS_XMLDOM.getFirstChild(node);
«IF isSimpleTypeList(e) && e.simpleType.union == null-»
          «elementAccess»«IF isArrayElement(e)»(«elementAccess».last)«ENDIF» := «getPackagePrefix(ns)»«XSDType2Oracle(ns, (TopLevelSimpleType) getSimpleType(e), "4l")»(DBMS_XMLDOM.getNodeValue(text));
«ELSE-»
          «elementAccess»«IF isArrayElement(e)»(«elementAccess».last)«ENDIF» := «convertXSDBasicType2Oracle(getBuiltInType(e), getFacets(e), "DBMS_XMLDOM.getNodeValue(text)", "text")»;
«ENDIF-»
«ELSE-»
«LET getNonLocalComplexType(e) AS ct-»
«IF e.complexType != null-»
          «elementAccess»«IF isArray(e, parentGroup)»(«elementAccess».last)«ENDIF» := «getPackagePrefix(ns)»«anonymousTypeName2Oracle(e, typeName)»4x(node);
«ELSEIF e.ref != null-»
«LET findReferencedElement(e.ref) AS refElement-»
«IF refElement.complexType != null-»
          «elementAccess»«IF isArray(e, parentGroup)»(«elementAccess».last)«ENDIF» := «getPackagePrefix(ns)»«anonymousTypeName2Oracle(ns, refElement, "")»4x(node);
«ELSEIF ct != null-»
          «elementAccess»«IF isArray(e, parentGroup)»(«elementAccess».last)«ENDIF» := «getPackagePrefix(ns)»«XSDType2Oracle(ns, ct)»4x(node);
«ELSE-»
-- No Type found for «e.ref»
«ENDIF-»
«ENDLET-»
«ELSEIF e.type != null-»
          «elementAccess»«IF isArray(e, parentGroup)»(«elementAccess».last)«ENDIF» := «getPackagePrefix(ns)»«XSDType2Oracle(ns, ct)»4x(node);
«ELSE-»
-- No Type found for «e.name»
«ENDIF-»
«ENDLET-»
«ENDIF-»
«IF e.nillable-»
          END IF;
«ENDIF-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDDEFINE»

«DEFINE XML2Oracle(Attribute a) FOR ServiceNamespace-»
«IF a.use == "required"-»
	v_return.«XSD2Oracle(a.name, a)» := «convertXSDBasicType2Oracle(getBuiltInType(a), getFacets(a), "DBMS_XMLDOM.getAttribute(elmt, '" + a.name + "')", null)»;
«ELSE-»
	attr := DBMS_XMLDOM.getAttributeNode(elmt, '«a.name»');
	IF NOT DBMS_XMLDOM.ISNULL(attr) THEN
      v_return.«XSD2Oracle(a.name, a)» := «convertXSDBasicType2Oracle(getBuiltInType(a), getFacets(a), "DBMS_XMLDOM.getValue(attr)", null)»;
	END IF;
«ENDIF-»
«ENDDEFINE»

«DEFINE XML2Oracle(AttributeGroupRef agr) FOR ServiceNamespace-»
«REM»Nothing to do cause all named attribute groups within owner ns are already expanded«ENDREM»
«ENDDEFINE»

«DEFINE XML2Oracle(AttributeGroup ag) FOR ServiceNamespace-»
«FOREACH ag.attributeOrAttributeGroup AS a-»
«EXPAND XML2Oracle(a)-»
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE XML2Oracle(Annotated a) FOR ServiceNamespace-»
«ERROR "Abstract type: " + this»
«ENDDEFINE»

«REM»Logik um PL/SQL RECORD TYPEs nach XML zu transformieren«ENDREM»
«DEFINE Oracle2XML(ComplexType ct, String parentParam, String name) FOR ServiceNamespace-»
«IF ct.attributeOrAttributeGroup.size > 0-»
	elmt := DBMS_XMLDOM.makeElement(p_parent_node);
«FOREACH ct.attributeOrAttributeGroup AS a-»
«EXPAND Oracle2XML(a, parentParam)-»
«ENDFOREACH-»

«ENDIF-»
«IF ct.complexContent != null-»
«IF ct.complexContent.extension != null-»
«LET findUsedServiceNamespace(ct.complexContent.extension.base.namespaceURI) AS ns-»
«LET findComplexType(ns, ct.complexContent.extension.base) AS tlct-»
«EXPAND Oracle2XML(tlct, parentParam, tlct.name)-»
«ENDLET-»
«ENDLET-»
«EXPAND Oracle2XML(ct.complexContent.extension, parentParam, name)-»
«ELSEIF ct.complexContent.restriction != null-»
«EXPAND Oracle2XML(ct.complexContent.restriction, parentParam, name)-»
«ENDIF-»
«ELSEIF ct.simpleContent != null-»
	text := DBMS_XMLDOM.createTextNode(p_domdoc, «convertOracle2XSDBasicType(getBuiltInType(ct.simpleContent.extension.base), null, parentParam + '.value')»);
	node := DBMS_XMLDOM.appendChild(p_parent_node, DBMS_XMLDOM.makeNode(text));
«IF ct.simpleContent.extension.attributeOrAttributeGroup.size > 0-»
	elmt := DBMS_XMLDOM.makeElement(p_parent_node);
«FOREACH ct.simpleContent.extension.attributeOrAttributeGroup AS a-»
«EXPAND Oracle2XML(a, parentParam)-»
«ENDFOREACH-»

«ENDIF-»
«ELSE-»
«IF ct.group != null-»
«EXPAND Oracle2XML(ct.group, parentParam, name, null, null, "group")-»
«ELSEIF ct.all != null-»
«EXPAND Oracle2XML(ct.all, parentParam, name, null, null, "all")-»
«ELSEIF ct.choice != null-»
«EXPAND Oracle2XML(ct.choice, parentParam, name, null, null, "choice")-»
«ELSEIF ct.sequence != null-»
«EXPAND Oracle2XML(ct.sequence, parentParam, name, null, null, "sequence")-»
«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«DEFINE Oracle2XML(ExtensionType et, String parentParam, String name) FOR ServiceNamespace-»
«IF et.attributeOrAttributeGroup.size > 0-»
	elmt := DBMS_XMLDOM.makeElement(p_parent_node);
«FOREACH et.attributeOrAttributeGroup AS a-»
«EXPAND Oracle2XML(a, parentParam)-»
«ENDFOREACH-»

«ENDIF-»
«IF et.group != null-»
«EXPAND Oracle2XML(et.group, parentParam, name, null, null, "group")-»
«ELSEIF et.all != null-»
«EXPAND Oracle2XML(et.all, parentParam, name, null, null, "all")-»
«ELSEIF et.choice != null-»
«EXPAND Oracle2XML(et.choice, parentParam, name, null, null, "choice")-»
«ELSEIF et.sequence != null-»
«EXPAND Oracle2XML(et.sequence, parentParam, name, null, null, "sequence")-»
«ENDIF-»
«ENDDEFINE»

«DEFINE Oracle2XML(ComplexRestrictionType crt, String parentParam, String name) FOR ServiceNamespace-»
«IF crt.group != null-»
«EXPAND Oracle2XML(crt.group, parentParam, name, null, null, "group")-»
«ELSEIF crt.all != null-»
«EXPAND Oracle2XML(crt.all, parentParam, name, null, null, "all")-»
«ELSEIF crt.choice != null-»
«EXPAND Oracle2XML(crt.choice, parentParam, name, null, null, "choice")-»
«ELSEIF crt.sequence != null-»
«EXPAND Oracle2XML(crt.sequence, parentParam, name, null, null, "sequence")-»
«ENDIF-»
«ENDDEFINE»

«DEFINE Oracle2XML(GroupRef gr, String parentParam, String typeName, String parentGroupType, Group parentGroup, String particleType) FOR ServiceNamespace-»
«EXPAND Oracle2XML(findReferencedGroup(gr.ref), parentParam, typeName, parentGroupType, parentGroup, particleType)-»
«ENDDEFINE»

«DEFINE Oracle2XML(Group g, String parentParam, String typeName, String parentGroupType, Group parentGroup, String particleType) FOR ServiceNamespace-»
«IF particleType == "choice"-»
  CASE
«FOREACH g.particle.typeSelect(JAXBElement) AS p-»
«EXPAND Oracle2XML(p.getValue(), parentParam, typeName, particleType, g, p.name.localPart)-»
«ENDFOREACH-»
    ELSE
«IF g.minOccurs > 0 && parentGroupType != "choice"-»
      «BasePackageName(model)».fehler_pflichtelement_fehlt('«parentParam»');
«ELSE-»
      NULL;
«ENDIF-»
  END CASE;
«ELSE-»
«FOREACH g.particle.typeSelect(JAXBElement) AS p-»
«EXPAND Oracle2XML(p.getValue(), parentParam, typeName, particleType, g, p.name.localPart)-»
«ENDFOREACH-»
«ENDIF-»
«ENDDEFINE»

«DEFINE Oracle2XML(Object obj, String parentParam, String typeName, String parentGroupType, Group parentGroup, String particleType) FOR ServiceNamespace-»
«ERROR "Particle type not supported: " + particleType»
«ENDDEFINE»

«DEFINE Oracle2XML(LocalElement e, String parentParam, String typeName, String parentGroupType, Group parentGroup, String particleType) FOR ServiceNamespace-»
«LET getTypeNamespace(e) AS ns-»
«LET getElementNamespace(e) AS elemNs-»
«LET parentParam + '.' + getOracleName(e) AS elementAccess-»
    «IF parentGroupType != "choice"»IF«ELSE»WHEN«ENDIF» «getIsNotNullExpression(e, parentParam, parentGroup)» THEN
«IF isArray(e, parentGroup)-»
     FOR i IN 1..«elementAccess».count LOOP
«ENDIF-»
      elmt := DBMS_XMLDOM.createElement(p_domdoc, '«e.ref != null ? e.ref.localPart : e.name»'«IF elemNs != null», '«elemNs.URI»'«ENDIF»);
      IF p_default_ns «IF elemNs != null»<> '«elemNs.URI»'«ELSE»IS NOT NULL«ENDIF» THEN
        DBMS_XMLDOM.setAttribute(elmt, 'xmlns', '«IF elemNs != null»«elemNs.URI»«ENDIF»');
      END IF;
      node := DBMS_XMLDOM.appendChild(p_parent_node, DBMS_XMLDOM.makeNode(elmt));
«IF hasSimpleType(e)-»
«IF e.nillable && isArray(e, parentGroup)-»
      IF «elementAccess»(i) IS NOT NULL THEN
«ENDIF-»
«IF isSimpleTypeList(e) && e.simpleType.union == null-»
      text := DBMS_XMLDOM.createTextNode(p_domdoc, «getPackagePrefix(ns)»«XSDType2Oracle(ns, (TopLevelSimpleType) getSimpleType(e), "2l")»(«elementAccess»));
      node := DBMS_XMLDOM.appendChild(node, DBMS_XMLDOM.makeNode(text));
«ELSE-»
«LET convertOracle2XSDBasicType(getBuiltInType(e), getFacets(e), isArrayElement(e) ? elementAccess + "(i)" : elementAccess) AS expr-»
«IF isXMLType(expr)-»
      «BasePackageName(model)».appendXMLType(«isArrayElement(e) ? elementAccess + "(i)" : elementAccess», p_domdoc, node);
«ELSE-»
      text := DBMS_XMLDOM.createTextNode(p_domdoc, «expr»);
      node := DBMS_XMLDOM.appendChild(node, DBMS_XMLDOM.makeNode(text));
«IF isLOB(expr)-»
      «BasePackageName(model)».fillTextNode(node, «isArrayElement(e) ? elementAccess + "(i)" : elementAccess»);
«ENDIF-»
«ENDIF-»
«ENDLET-»
«ENDIF-»
«ELSE-»
«IF e.nillable && isArray(e, parentGroup)-»
      IF «getPackagePrefix(ns)»isNotNull(«elementAccess»(i)) THEN
«ENDIF-»
«LET getNonLocalComplexType(e) AS ct-»
«IF e.complexType != null-»
      «getPackagePrefix(ns)»«anonymousTypeName2Oracle(e, typeName)»2x(«elementAccess»«IF isArray(e, parentGroup)»(i)«ENDIF», p_domdoc, node, «getNsContextParam(elemNs)»);
«ELSEIF e.ref != null-»
«LET findReferencedElement(e.ref) AS refElement-»
«IF refElement.complexType != null-»
      «getPackagePrefix(ns)»«anonymousTypeName2Oracle(ns, refElement, "")»2x(«elementAccess»«IF isArray(e, parentGroup)»(i)«ENDIF», p_domdoc, node, «getNsContextParam(elemNs)»);
«ELSEIF ct != null-»
      «getPackagePrefix(ns)»«XSDType2Oracle(ns, ct, "2x")»(«elementAccess»«IF isArray(e, parentGroup)»(i)«ENDIF», p_domdoc, node, «getNsContextParam(elemNs)»);
«ELSE-»
-- No Type found for «e.ref»
«ENDIF-»
«ENDLET-»
«ELSEIF e.type != null-»
      «getPackagePrefix(ns)»«XSDType2Oracle(ns, ct, "2x")»(«elementAccess»«IF isArray(e, parentGroup)»(i)«ENDIF», p_domdoc, node, «getNsContextParam(elemNs)»);
«ELSE-»
-- No Type found for «e.name»
«ENDIF-»
«ENDLET-»
«ENDIF-»
«IF e.nillable && isArray(e, parentGroup)-»
      ELSE
       DBMS_XMLDOM.setAttribute(elmt, 'xsi:nil', 'true');
       DBMS_XMLDOM.setAttribute(elmt, 'xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
      END IF;
«ENDIF-»
«IF isArray(e, parentGroup)-»
     END LOOP;
«ENDIF-»
«IF parentGroupType != "choice"-»
«IF e.minOccurs > 0-»
    ELSE
«IF e.nillable && !isArray(e, parentGroup)-»
      elmt := DBMS_XMLDOM.createElement(p_domdoc, '«e.ref != null ? e.ref.localPart : e.name»'«IF elemNs != null», '«elemNs.URI»'«ENDIF»);
      IF p_default_ns «IF elemNs != null»<> '«elemNs.URI»'«ELSE»IS NOT NULL«ENDIF» THEN
        DBMS_XMLDOM.setAttribute(elmt, 'xmlns', '«elemNs.URI»');
      END IF;
      node := DBMS_XMLDOM.appendChild(p_parent_node, DBMS_XMLDOM.makeNode(elmt));
      DBMS_XMLDOM.setAttribute(elmt, 'xsi:nil', 'true');
      DBMS_XMLDOM.setAttribute(elmt, 'xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
«ELSE-»
      «BasePackageName(model)».fehler_pflichtelement_fehlt('«elementAccess»');
«ENDIF-»
«ENDIF-»
    END IF;
«ENDIF-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDDEFINE»

«DEFINE Oracle2XML(Attribute a, String parentParam) FOR ServiceNamespace-»
«LET parentParam + '.' + XSD2Oracle(a.name, a) AS attributeAccess-»
	IF «attributeAccess» IS NOT NULL THEN
      DBMS_XMLDOM.setAttribute(elmt, '«a.name»', «convertOracle2XSDBasicType(getBuiltInType(a), getFacets(a), attributeAccess)»);
«IF a.use == "required"-»
    ELSE
      SOAP_BASE.fehler_pflichtelement_fehlt('«attributeAccess»');
«ENDIF-»
    END IF;
«ENDLET-»
«ENDDEFINE»

«DEFINE Oracle2XML(AttributeGroupRef agr, String parentParam) FOR ServiceNamespace-»
«REM»Nothing to do cause all named attribute groups within owner ns are already expanded«ENDREM»
«ENDDEFINE»

«DEFINE Oracle2XML(AttributeGroup ag, String parentParam) FOR ServiceNamespace-»
«FOREACH ag.attributeOrAttributeGroup AS a-»
«EXPAND Oracle2XML(a, parentParam)-»
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE Oracle2XML(Annotated a, String parentParam) FOR ServiceNamespace-»
«ERROR "Abstract type: " + this»
«ENDDEFINE»

«DEFINE XMLStringConversion(TopLevelElement tle) FOR ServiceNamespace-»
«LET getTypeNamespace(tle) AS ns-»
«IF getComplexType(tle) != null-»
«LET tle.complexType == null ? XSDType2Oracle(ns, ns.findComplexType(tle.type)) : anonymousTypeName2Oracle(tle, "") AS typeName-»
  FUNCTION «XSD2OracleSpecial(tle)»_4x(p_param_in IN CLOB) RETURN «getPackagePrefix(ns)»«typeName» AS
    myparser    DBMS_XMLPARSER.parser;
    indomdoc    DBMS_XMLDOM.DOMDocument;
    inroot_elmt DBMS_XMLDOM.DOMElement;
    localName   VARCHAR2(255);
    namespace   VARCHAR2(999);

    param_in    «getPackagePrefix(ns)»«typeName»;
  BEGIN
    myParser := DBMS_XMLPARSER.newParser;
    DBMS_XMLPARSER.parseClob(myParser, p_param_in);
    indomdoc := DBMS_XMLPARSER.getDocument(myParser);
    DBMS_XMLPARSER.freeParser(myParser);
    inroot_elmt := DBMS_XMLDOM.getDocumentElement(indomdoc);
    localName := DBMS_XMLDOM.getLocalName(inroot_elmt);
    namespace := DBMS_XMLDOM.getNamespace(inroot_elmt);

    IF namespace <> c_URI OR localName <> '«tle.name»' THEN
      DBMS_XMLDOM.freeDocument(indomdoc);
      «BasePackageName(model)».fehler_unerwartetes_element('{' || namespace || '}' || localName);
    END IF;

    param_in := «getPackagePrefix(ns)»«typeName»4x(DBMS_XMLDOM.makeNode(inroot_elmt));
    DBMS_XMLDOM.freeDocument(indomdoc);

    RETURN param_in;
  END;

  FUNCTION «XSD2OracleSpecial(tle)»_2x(p_param_in IN «getPackagePrefix(ns)»«typeName») RETURN CLOB AS
    outdomdoc    DBMS_XMLDOM.DOMDocument;
    outnode      DBMS_XMLDOM.DOMNode;
    outroot_elmt DBMS_XMLDOM.DOMElement;
    outroot_node DBMS_XMLDOM.DOMNode;

    v_clob       CLOB;
  BEGIN
    outdomdoc := DBMS_XMLDOM.newDOMDocument;
    outnode   := DBMS_XMLDOM.makeNode(outdomdoc);

    outroot_elmt := DBMS_XMLDOM.createElement(outdomdoc, '«tle.name»', c_URI);
    DBMS_XMLDOM.setAttribute(outroot_elmt, 'xmlns', c_URI);
    outroot_node := DBMS_XMLDOM.appendChild(outnode, DBMS_XMLDOM.makeNode(outroot_elmt));
    «getPackagePrefix(ns)»«typeName»2x(p_param_in, outdomdoc, outroot_node, c_URI);

    DBMS_LOB.createTemporary(v_clob, TRUE, dbms_lob.call);
    DBMS_XMLDOM.writeToClob(outnode, v_clob);
    DBMS_XMLDOM.freeDocument(outdomdoc);

    RETURN v_clob;
  END;
«ENDLET-»
«ENDIF-»
«ENDLET-»
«ENDDEFINE»
